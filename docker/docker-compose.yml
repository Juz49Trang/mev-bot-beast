version: '3.8'

services:
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: mev-bot-db
    environment:
      POSTGRES_DB: mev_bot
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - mev-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: mev-bot-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mev-network
    restart: unless-stopped

  mev-bot:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: mev-bot-main
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      MAIN_WALLET_PRIVATE_KEY: ${MAIN_WALLET_PRIVATE_KEY}
      ALCHEMY_API_KEY: ${ALCHEMY_API_KEY}
    depends_on:
      - postgres
      - redis
    volumes:
      - ../logs:/app/logs
      - ../config:/app/config:ro
    networks:
      - mev-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  dashboard:
    build:
      context: ..
      dockerfile: docker/Dockerfile.dashboard
    container_name: mev-bot-dashboard
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      DASHBOARD_USER: ${DASHBOARD_USER}
      DASHBOARD_PASSWORD: ${DASHBOARD_PASSWORD}
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - redis
    networks:
      - mev-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: mev-bot-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - mev-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: mev-bot-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - mev-network
    restart: unless-stopped

networks:
  mev-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: